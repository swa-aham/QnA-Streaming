C:\Users\SOHAM\.jdks\openjdk-22.0.1\bin\java.exe "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2025.1.2\lib\idea_rt.jar=56027" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath F:\Projects\Practice\consumer\target\classes;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.5.3\spring-boot-starter-web-3.5.3.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter\3.5.3\spring-boot-starter-3.5.3.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot\3.5.3\spring-boot-3.5.3.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.5.3\spring-boot-autoconfigure-3.5.3.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.5.3\spring-boot-starter-logging-3.5.3.jar;C:\Users\SOHAM\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\SOHAM\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\SOHAM\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\SOHAM\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\SOHAM\.m2\repository\org\yaml\snakeyaml\2.4\snakeyaml-2.4.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.5.3\spring-boot-starter-json-3.5.3.jar;C:\Users\SOHAM\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.19.1\jackson-databind-2.19.1.jar;C:\Users\SOHAM\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.19.1\jackson-annotations-2.19.1.jar;C:\Users\SOHAM\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.19.1\jackson-core-2.19.1.jar;C:\Users\SOHAM\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.19.1\jackson-datatype-jdk8-2.19.1.jar;C:\Users\SOHAM\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.19.1\jackson-datatype-jsr310-2.19.1.jar;C:\Users\SOHAM\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.19.1\jackson-module-parameter-names-2.19.1.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.5.3\spring-boot-starter-tomcat-3.5.3.jar;C:\Users\SOHAM\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.42\tomcat-embed-core-10.1.42.jar;C:\Users\SOHAM\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.42\tomcat-embed-el-10.1.42.jar;C:\Users\SOHAM\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.42\tomcat-embed-websocket-10.1.42.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-web\6.2.8\spring-web-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-beans\6.2.8\spring-beans-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-webmvc\6.2.8\spring-webmvc-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-aop\6.2.8\spring-aop-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-expression\6.2.8\spring-expression-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\kafka\spring-kafka\3.3.7\spring-kafka-3.3.7.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-context\6.2.8\spring-context-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-messaging\6.2.8\spring-messaging-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-tx\6.2.8\spring-tx-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\retry\spring-retry\2.0.12\spring-retry-2.0.12.jar;C:\Users\SOHAM\.m2\repository\org\apache\kafka\kafka-clients\3.9.1\kafka-clients-3.9.1.jar;C:\Users\SOHAM\.m2\repository\com\github\luben\zstd-jni\1.5.6-4\zstd-jni-1.5.6-4.jar;C:\Users\SOHAM\.m2\repository\org\lz4\lz4-java\1.8.0\lz4-java-1.8.0.jar;C:\Users\SOHAM\.m2\repository\org\xerial\snappy\snappy-java\1.1.10.5\snappy-java-1.1.10.5.jar;C:\Users\SOHAM\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\SOHAM\.m2\repository\io\micrometer\micrometer-observation\1.15.1\micrometer-observation-1.15.1.jar;C:\Users\SOHAM\.m2\repository\io\micrometer\micrometer-commons\1.15.1\micrometer-commons-1.15.1.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter-webflux\3.5.3\spring-boot-starter-webflux-3.5.3.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter-reactor-netty\3.5.3\spring-boot-starter-reactor-netty-3.5.3.jar;C:\Users\SOHAM\.m2\repository\io\projectreactor\netty\reactor-netty-http\1.2.7\reactor-netty-http-1.2.7.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-codec-http\4.1.122.Final\netty-codec-http-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-codec-http2\4.1.122.Final\netty-codec-http2-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-resolver-dns\4.1.122.Final\netty-resolver-dns-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-codec-dns\4.1.122.Final\netty-codec-dns-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-resolver-dns-native-macos\4.1.122.Final\netty-resolver-dns-native-macos-4.1.122.Final-osx-x86_64.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-resolver-dns-classes-macos\4.1.122.Final\netty-resolver-dns-classes-macos-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-transport-native-epoll\4.1.122.Final\netty-transport-native-epoll-4.1.122.Final-linux-x86_64.jar;C:\Users\SOHAM\.m2\repository\io\projectreactor\netty\reactor-netty-core\1.2.7\reactor-netty-core-1.2.7.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-handler-proxy\4.1.122.Final\netty-handler-proxy-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-codec-socks\4.1.122.Final\netty-codec-socks-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-webflux\6.2.8\spring-webflux-6.2.8.jar;C:\Users\SOHAM\.m2\repository\io\projectreactor\reactor-core\3.7.7\reactor-core-3.7.7.jar;C:\Users\SOHAM\.m2\repository\org\reactivestreams\reactive-streams\1.0.4\reactive-streams-1.0.4.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.5.3\spring-boot-starter-jdbc-3.5.3.jar;C:\Users\SOHAM\.m2\repository\com\zaxxer\HikariCP\6.3.0\HikariCP-6.3.0.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-jdbc\6.2.8\spring-jdbc-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.5.3\spring-boot-starter-data-jpa-3.5.3.jar;C:\Users\SOHAM\.m2\repository\org\hibernate\orm\hibernate-core\6.6.18.Final\hibernate-core-6.6.18.Final.jar;C:\Users\SOHAM\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\SOHAM\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\SOHAM\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\SOHAM\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\SOHAM\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\SOHAM\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\SOHAM\.m2\repository\net\bytebuddy\byte-buddy\1.17.6\byte-buddy-1.17.6.jar;C:\Users\SOHAM\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\SOHAM\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\SOHAM\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\SOHAM\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\SOHAM\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\SOHAM\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\SOHAM\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\SOHAM\.m2\repository\org\springframework\data\spring-data-jpa\3.5.1\spring-data-jpa-3.5.1.jar;C:\Users\SOHAM\.m2\repository\org\springframework\data\spring-data-commons\3.5.1\spring-data-commons-3.5.1.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-orm\6.2.8\spring-orm-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-aspects\6.2.8\spring-aspects-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\SOHAM\.m2\repository\org\postgresql\postgresql\42.7.7\postgresql-42.7.7.jar;C:\Users\SOHAM\.m2\repository\org\checkerframework\checker-qual\3.49.3\checker-qual-3.49.3.jar;C:\Users\SOHAM\.m2\repository\org\projectlombok\lombok\1.18.38\lombok-1.18.38.jar;C:\Users\SOHAM\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\SOHAM\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-core\6.2.8\spring-core-6.2.8.jar;C:\Users\SOHAM\.m2\repository\org\springframework\spring-jcl\6.2.8\spring-jcl-6.2.8.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-handler\4.1.122.Final\netty-handler-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-common\4.1.122.Final\netty-common-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-resolver\4.1.122.Final\netty-resolver-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-buffer\4.1.122.Final\netty-buffer-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-transport\4.1.122.Final\netty-transport-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-transport-native-unix-common\4.1.122.Final\netty-transport-native-unix-common-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-codec\4.1.122.Final\netty-codec-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\io\netty\netty-transport-classes-epoll\4.1.122.Final\netty-transport-classes-epoll-4.1.122.Final.jar;C:\Users\SOHAM\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\SOHAM\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar com.kafka.consumer.ConsumerApplication

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.3)

2025-06-25T05:12:26.279+05:30  INFO 13516 --- [consumer] [           main] com.kafka.consumer.ConsumerApplication   : Starting ConsumerApplication using Java 22.0.1 with PID 13516 (F:\Projects\Practice\consumer\target\classes started by SOHAM in F:\Projects\Practice\consumer)
2025-06-25T05:12:26.288+05:30  INFO 13516 --- [consumer] [           main] com.kafka.consumer.ConsumerApplication   : No active profile set, falling back to 1 default profile: "default"
2025-06-25T05:12:28.617+05:30  INFO 13516 --- [consumer] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25T05:12:28.965+05:30  INFO 13516 --- [consumer] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 320 ms. Found 1 JPA repository interface.
2025-06-25T05:12:30.515+05:30  INFO 13516 --- [consumer] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8081 (http)
2025-06-25T05:12:30.554+05:30  INFO 13516 --- [consumer] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-25T05:12:30.554+05:30  INFO 13516 --- [consumer] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-06-25T05:12:30.723+05:30  INFO 13516 --- [consumer] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-25T05:12:30.727+05:30  INFO 13516 --- [consumer] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 4250 ms
2025-06-25T05:12:31.120+05:30  INFO 13516 --- [consumer] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-25T05:12:32.690+05:30  INFO 13516 --- [consumer] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2f0ccb34
2025-06-25T05:12:32.692+05:30  INFO 13516 --- [consumer] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-25T05:12:32.793+05:30  INFO 13516 --- [consumer] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-25T05:12:32.936+05:30  INFO 13516 --- [consumer] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.18.Final
2025-06-25T05:12:33.009+05:30  INFO 13516 --- [consumer] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-25T05:12:33.763+05:30  INFO 13516 --- [consumer] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25T05:12:34.051+05:30  WARN 13516 --- [consumer] [           main] org.hibernate.orm.deprecation            : HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25T05:12:34.281+05:30  INFO 13516 --- [consumer] [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.5
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-25T05:12:35.715+05:30  INFO 13516 --- [consumer] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-25T05:12:35.720+05:30  INFO 13516 --- [consumer] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25T05:12:36.904+05:30  WARN 13516 --- [consumer] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-25T05:12:37.894+05:30  INFO 13516 --- [consumer] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8081 (http) with context path '/'
2025-06-25T05:12:38.223+05:30  INFO 13516 --- [consumer] [           main] o.a.k.clients.consumer.ConsumerConfig    : ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.include.jmx.reporter = true
	auto.offset.reset = earliest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-qna-consumer-group-auto-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	enable.metrics.push = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = qna-consumer-group-auto
	group.instance.id = null
	group.protocol = classic
	group.remote.assignor = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metadata.recovery.strategy = none
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.max.ms = 1000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.header.urlencode = false
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.springframework.kafka.support.serializer.JsonDeserializer

2025-06-25T05:12:38.330+05:30  INFO 13516 --- [consumer] [           main] o.a.k.c.t.i.KafkaMetricsCollector        : initializing Kafka metrics collector
2025-06-25T05:12:38.780+05:30  INFO 13516 --- [consumer] [           main] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 3.9.1
2025-06-25T05:12:38.780+05:30  INFO 13516 --- [consumer] [           main] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: f745dfdcee2b9851
2025-06-25T05:12:38.780+05:30  INFO 13516 --- [consumer] [           main] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1750808558777
2025-06-25T05:12:38.786+05:30  INFO 13516 --- [consumer] [           main] o.a.k.c.c.i.ClassicKafkaConsumer         : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Subscribed to topic(s): practice5
2025-06-25T05:12:38.822+05:30  INFO 13516 --- [consumer] [           main] com.kafka.consumer.ConsumerApplication   : Started ConsumerApplication in 13.699 seconds (process running for 14.971)
2025-06-25T05:12:39.848+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Cluster ID: Vxv2HWJARo2EzPkFcPlDlA
2025-06-25T05:12:39.848+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)
2025-06-25T05:12:39.857+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] (Re-)joining group
2025-06-25T05:12:39.907+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Request joining group due to: need to re-join with the given member-id: consumer-qna-consumer-group-auto-1-b2927614-90a6-4e25-84af-2bf2eb6893d3
2025-06-25T05:12:39.907+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] (Re-)joining group
2025-06-25T05:12:42.944+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Successfully joined group with generation Generation{generationId=31, memberId='consumer-qna-consumer-group-auto-1-b2927614-90a6-4e25-84af-2bf2eb6893d3', protocol='range'}
2025-06-25T05:12:42.957+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Finished assignment for group at generation 31: {consumer-qna-consumer-group-auto-1-b2927614-90a6-4e25-84af-2bf2eb6893d3=Assignment(partitions=[practice5-0])}
2025-06-25T05:12:42.980+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Successfully synced group in generation Generation{generationId=31, memberId='consumer-qna-consumer-group-auto-1-b2927614-90a6-4e25-84af-2bf2eb6893d3', protocol='range'}
2025-06-25T05:12:42.980+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Notifying assignor about the new Assignment(partitions=[practice5-0])
2025-06-25T05:12:42.983+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] k.c.c.i.ConsumerRebalanceListenerInvoker : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Adding newly assigned partitions: practice5-0
2025-06-25T05:12:42.995+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerUtils        : Setting offset for partition practice5-0 to the committed offset FetchPosition{offset=66, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[localhost:9092 (id: 1 rack: null)], epoch=0}}
2025-06-25T05:12:42.995+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.s.k.l.KafkaMessageListenerContainer    : qna-consumer-group-auto: partitions assigned: [practice5-0]
[INFO] Received Message: "Did the Berlin Wall fall in the 1990s?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in the 1990s?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in 1988?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in 1988?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did dinosaurs exist?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did dinosaurs exist?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in 1988?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in 1988?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in 1988?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in 1988?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Titanic sink?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Titanic sink?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did dinosaurs fly?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did dinosaurs fly?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in 1988?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in 1988?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did Rome fall?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did Rome fall?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in the 1990s?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in the 1990s?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the dinosaurs die out before or after humans evolved?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the dinosaurs die out before or after humans evolved?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did Pluto get demoted?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did Pluto get demoted?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did dinosaurs exist?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did dinosaurs exist?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in 1988?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in 1988?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did Pluto used to be a planet?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did Pluto used to be a planet?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in the 1970s?
"
[WARNING] Rate limit response received. Retry after: 58 seconds
[ERROR] Gemini rate-limited request: Did the Berlin Wall fall in the 1970s?

[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 58 seconds...
[INFO] Kafka consumer paused.
[WAITING] Resuming in 1 seconds...
[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Received Message: "Did the Ottoman Empire fight in World War II?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Ottoman Empire fight in World War II?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in 1988?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in 1988?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in the 80s?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in the 80s?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did dinosaurs fly?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did dinosaurs fly?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in 1990?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in 1990?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the dinosaurs go extinct?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the dinosaurs go extinct?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did dinosaurs roar?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did dinosaurs roar?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Berlin Wall fall in the 1970s?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Berlin Wall fall in the 1970s?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Soviet Union exist in 2023?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Soviet Union exist in 2023?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "What year did World War II end?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: What year did World War II end?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did the Soviet Union ever land on the moon?
"
Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the Soviet Union ever land on the moon?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did mammals exist with dinosaurs?
"
[WARNING] Rate limit response received. Retry after: 41 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 41 seconds...
[INFO] Kafka consumer paused.
[WAITING] Resuming in 41 seconds...[ERROR] Gemini rate-limited request: Did mammals exist with dinosaurs?

[WAITING] Resuming in 1 seconds...
[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Received Message: "Did Lincoln free slaves?
"
[WARNING] Rate limit response received. Retry after: 0 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 0 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did Rome fall?
"

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[ERROR] Gemini rate-limited request: Did Lincoln free slaves?

[WARNING] Rate limit response received. Retry after: 58 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 58 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did Nixon resign?
"
[WAITING] Resuming in 58 seconds...[ERROR] Gemini rate-limited request: Did Rome fall?

[WARNING] Rate limit response received. Retry after: 58 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 58 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did dinosaurs fly?
"
[WAITING] Resuming in 58 seconds...[ERROR] Gemini rate-limited request: Did Nixon resign?

[WAITING] Resuming in 57 seconds...[WARNING] Rate limit response received. Retry after: 57 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 57 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the Berlin Wall fall in 1990?
"
[WAITING] Resuming in 57 seconds...[ERROR] Gemini rate-limited request: Did dinosaurs fly?

[WARNING] Rate limit response received. Retry after: 56 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 56 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the USSR win the Cold War?
"
[WAITING] Resuming in 56 seconds...[ERROR] Gemini rate-limited request: Did the Berlin Wall fall in 1990?

[WAITING] Resuming in 55 seconds...Hibernate: select qa1_0.id,qa1_0.answer,qa1_0.question from exam qa1_0 where qa1_0.id=?
Hibernate: update exam set answer=?,question=? where id=?
Message: Did the USSR win the Cold War?
 # processed successfully.
[INFO] QnA processed and saved successfully.
[INFO] Received Message: "Did dinosaurs fly?
"
[WAITING] Resuming in 54 seconds...[WARNING] Rate limit response received. Retry after: 54 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 54 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did Lincoln free slaves?
"
[WAITING] Resuming in 54 seconds...[ERROR] Gemini rate-limited request: Did dinosaurs fly?

[WAITING] Resuming in 53 seconds...[WARNING] Rate limit response received. Retry after: 53 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 53 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the US win the Vietnam War?
"
[WAITING] Resuming in 53 seconds...[ERROR] Gemini rate-limited request: Did Lincoln free slaves?

[WAITING] Resuming in 53 seconds...[WARNING] Rate limit response received. Retry after: 52 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 52 seconds...
[INFO] Kafka consumer paused.
[WAITING] Resuming in 52 seconds...[ERROR] Gemini rate-limited request: Did the US win the Vietnam War?

[WAITING] Resuming in 1 seconds...
[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Received Message: "Did the Roman Empire fall?
"
[WARNING] Rate limit response received. Retry after: 58 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 58 seconds...
[INFO] Kafka consumer paused.
[WAITING] Resuming in 58 seconds...[ERROR] Gemini rate-limited request: Did the Roman Empire fall?

[WAITING] Resuming in 1 seconds...
[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Received Message: "Did the Earth come before the moon?
"
[WARNING] Rate limit response received. Retry after: 59 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 59 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did dinosaurs fly?
"
[WAITING] Resuming in 59 seconds...[ERROR] Gemini rate-limited request: Did the Earth come before the moon?

[WAITING] Resuming in 58 seconds...[WARNING] Rate limit response received. Retry after: 58 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 58 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the Berlin Wall fall in 1990?
"
[WAITING] Resuming in 58 seconds...[ERROR] Gemini rate-limited request: Did dinosaurs fly?

[WARNING] Rate limit response received. Retry after: 58 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 58 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Was Pluto ever considered a planet?
"
[WAITING] Resuming in 58 seconds...[ERROR] Gemini rate-limited request: Did the Berlin Wall fall in 1990?

[WAITING] Resuming in 57 seconds...[WARNING] Rate limit response received. Retry after: 56 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 56 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the US win the Vietnam War?
"
[WAITING] Resuming in 56 seconds...[ERROR] Gemini rate-limited request: Was Pluto ever considered a planet?

[WAITING] Resuming in 56 seconds...[WARNING] Rate limit response received. Retry after: 56 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 56 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "What year did World War II end?
"
[WAITING] Resuming in 56 seconds...[ERROR] Gemini rate-limited request: Did the US win the Vietnam War?

[WAITING] Resuming in 55 seconds...[WARNING] Rate limit response received. Retry after: 55 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 55 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did Rome fall?
"
[WAITING] Resuming in 55 seconds...[ERROR] Gemini rate-limited request: What year did World War II end?

[WAITING] Resuming in 55 seconds...[WARNING] Rate limit response received. Retry after: 54 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 54 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did humans evolve?
"
[WAITING] Resuming in 54 seconds...[ERROR] Gemini rate-limited request: Did Rome fall?

[WAITING] Resuming in 53 seconds...[WARNING] Rate limit response received. Retry after: 53 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 53 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the Berlin Wall fall in the 1990s?
"
[WAITING] Resuming in 53 seconds...[ERROR] Gemini rate-limited request: Did humans evolve?

[WAITING] Resuming in 53 seconds...[WARNING] Rate limit response received. Retry after: 53 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 53 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the Berlin Wall fall in the 90s?
"
[WAITING] Resuming in 53 seconds...[ERROR] Gemini rate-limited request: Did the Berlin Wall fall in the 1990s?

[WAITING] Resuming in 52 seconds...[WARNING] Rate limit response received. Retry after: 52 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 52 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did mammals exist during the Mesozoic Era?
"
[WAITING] Resuming in 52 seconds...[ERROR] Gemini rate-limited request: Did the Berlin Wall fall in the 90s?

[WAITING] Resuming in 51 seconds...[WARNING] Rate limit response received. Retry after: 51 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 51 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the dinosaurs go extinct?
"
[WAITING] Resuming in 51 seconds...[ERROR] Gemini rate-limited request: Did mammals exist during the Mesozoic Era?

[WAITING] Resuming in 50 seconds...[WARNING] Rate limit response received. Retry after: 50 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 50 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the Soviet Union land a person on the moon?
"
[WAITING] Resuming in 50 seconds...[ERROR] Gemini rate-limited request: Did the dinosaurs go extinct?

[WAITING] Resuming in 50 seconds...[WARNING] Rate limit response received. Retry after: 50 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 50 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did mammals evolve after dinosaurs?
"
[WAITING] Resuming in 50 seconds...[ERROR] Gemini rate-limited request: Did the Soviet Union land a person on the moon?

[WAITING] Resuming in 49 seconds...[WARNING] Rate limit response received. Retry after: 48 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 48 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did Nixon resign?
"
[WAITING] Resuming in 48 seconds...[ERROR] Gemini rate-limited request: Did mammals evolve after dinosaurs?

[WAITING] Resuming in 48 seconds...[WARNING] Rate limit response received. Retry after: 48 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 48 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did the Roman Empire fall?
"
[WAITING] Resuming in 48 seconds...[ERROR] Gemini rate-limited request: Did Nixon resign?

[WAITING] Resuming in 47 seconds...[WARNING] Rate limit response received. Retry after: 47 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 47 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did dinosaurs roar?
"
[WAITING] Resuming in 47 seconds...[ERROR] Gemini rate-limited request: Did the Roman Empire fall?

[WAITING] Resuming in 47 seconds...[WARNING] Rate limit response received. Retry after: 46 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 46 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did dinosaurs fly?
"
[WAITING] Resuming in 46 seconds...[ERROR] Gemini rate-limited request: Did dinosaurs roar?

[WAITING] Resuming in 45 seconds...[WARNING] Rate limit response received. Retry after: 45 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 45 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did dinosaurs fly?
"
[WAITING] Resuming in 45 seconds...[ERROR] Gemini rate-limited request: Did dinosaurs fly?

[WAITING] Resuming in 45 seconds...[WARNING] Rate limit response received. Retry after: 45 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 45 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did dinosaurs roam Earth?
"
[WAITING] Resuming in 45 seconds...[ERROR] Gemini rate-limited request: Did dinosaurs fly?

[WAITING] Resuming in 44 seconds...[WARNING] Rate limit response received. Retry after: 44 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 44 seconds...
[INFO] Kafka consumer paused.
[INFO] Received Message: "Did dinosaurs have feathers?
"
[WAITING] Resuming in 44 seconds...[ERROR] Gemini rate-limited request: Did dinosaurs roam Earth?

[WAITING] Resuming in 43 seconds...[WARNING] Rate limit response received. Retry after: 43 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 43 seconds...
[INFO] Kafka consumer paused.
[WAITING] Resuming in 43 seconds...[ERROR] Gemini rate-limited request: Did dinosaurs have feathers?

[WAITING] Resuming in 1 seconds...
[INFO] Resuming Kafka consumer now.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.

[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
[INFO] Received Message: "Who was the first chief minister of Gujarat?
"
[WARNING] Rate limit response received. Retry after: 2 seconds
[WARNING] Rate limit hit: Rate limit exceeded
[INFO] Pausing consumer for 2 seconds...
[INFO] Kafka consumer paused.
[WAITING] Resuming in 2 seconds...[ERROR] Gemini rate-limited request: Who was the first chief minister of Gujarat?

[WAITING] Resuming in 1 seconds...
[INFO] Resuming Kafka consumer now.
[INFO] Kafka consumer resumed.
2025-06-25T05:21:39.156+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] k.c.c.i.ConsumerRebalanceListenerInvoker : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Revoke previously assigned partitions practice5-0
2025-06-25T05:21:39.162+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.s.k.l.KafkaMessageListenerContainer    : qna-consumer-group-auto: partitions revoked: [practice5-0]
2025-06-25T05:21:39.162+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Member consumer-qna-consumer-group-auto-1-b2927614-90a6-4e25-84af-2bf2eb6893d3 sending LeaveGroup request to coordinator localhost:9092 (id: 2147483646 rack: null) due to the consumer unsubscribed from all topics
2025-06-25T05:21:39.162+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Resetting generation and member id due to: consumer pro-actively leaving the group
2025-06-25T05:21:39.162+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Request joining group due to: consumer pro-actively leaving the group
2025-06-25T05:21:39.162+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.i.ClassicKafkaConsumer         : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Unsubscribed all topics or patterns and assigned partitions
2025-06-25T05:21:39.164+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Resetting generation and member id due to: consumer pro-actively leaving the group
2025-06-25T05:21:39.164+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-qna-consumer-group-auto-1, groupId=qna-consumer-group-auto] Request joining group due to: consumer pro-actively leaving the group
2025-06-25T05:21:39.323+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-06-25T05:21:39.323+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-06-25T05:21:39.323+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.telemetry.internals.ClientTelemetryReporter
2025-06-25T05:21:39.323+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-06-25T05:21:39.335+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.a.kafka.common.utils.AppInfoParser     : App info kafka.consumer for consumer-qna-consumer-group-auto-1 unregistered
2025-06-25T05:21:39.335+05:30  INFO 13516 --- [consumer] [-listener-0-C-1] o.s.k.l.KafkaMessageListenerContainer    : qna-consumer-group-auto: Consumer stopped
2025-06-25T05:21:39.339+05:30  INFO 13516 --- [consumer] [ionShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-25T05:21:39.356+05:30  INFO 13516 --- [consumer] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-25T05:21:41.385+05:30  INFO 13516 --- [consumer] [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25T05:21:41.388+05:30  INFO 13516 --- [consumer] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-06-25T05:21:42.122+05:30  INFO 13516 --- [consumer] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

Process finished with exit code 130
